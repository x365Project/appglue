[{"C:\\appglue\\appglue.site\\src\\NavFrame\\NavFrame.stories.tsx":"1","C:\\appglue\\appglue.site\\src\\NavFrame\\NavFrame.tsx":"2","C:\\appglue\\appglue.site\\src\\NavFrame\\TopNavBar.tsx":"3","C:\\appglue\\appglue.site\\src\\NavFrame\\TopBar.tsx":"4","C:\\appglue\\appglue.site\\src\\utils\\Theme.tsx":"5","C:\\appglue\\appglue.site\\src\\NavFrame\\NavBarData.tsx":"6","C:\\appglue\\appglue.site\\src\\NavFrame\\SideNavBar.tsx":"7","C:\\appglue\\appglue.site\\src\\index.tsx":"8","C:\\appglue\\appglue.site\\src\\reportWebVitals.ts":"9","C:\\appglue\\appglue.site\\src\\App.tsx":"10","C:\\appglue\\appglue.site\\src\\NavFrame\\FrameProps.tsx":"11","C:\\appglue\\appglue.site\\src\\NavFrame\\ToBarNotifications.tsx":"12","C:\\appglue\\appglue.site\\src\\Pages\\PageRoutes.tsx":"13","C:\\appglue\\appglue.site\\src\\utils\\helpers.ts":"14","C:\\appglue\\appglue.site\\src\\NavFrame\\Dropdown.tsx":"15","C:\\appglue\\appglue.site\\src\\Pages\\TeamPage.tsx":"16"},{"size":11356,"mtime":1610149022526,"results":"17","hashOfConfig":"18"},{"size":861,"mtime":1610149022527,"results":"19","hashOfConfig":"18"},{"size":16379,"mtime":1610149022532,"results":"20","hashOfConfig":"18"},{"size":18869,"mtime":1610149022530,"results":"21","hashOfConfig":"18"},{"size":1891,"mtime":1610149022538,"results":"22","hashOfConfig":"18"},{"size":1760,"mtime":1608254824788,"results":"23","hashOfConfig":"18"},{"size":9899,"mtime":1610149022528,"results":"24","hashOfConfig":"18"},{"size":518,"mtime":1608254824868,"results":"25","hashOfConfig":"18"},{"size":440,"mtime":1608254824871,"results":"26","hashOfConfig":"18"},{"size":724,"mtime":1610149022523,"results":"27","hashOfConfig":"18"},{"size":2108,"mtime":1610149022525,"results":"28","hashOfConfig":"18"},{"size":630,"mtime":1608254824792,"results":"29","hashOfConfig":"18"},{"size":2273,"mtime":1610149022535,"results":"30","hashOfConfig":"18"},{"size":685,"mtime":1609806088400,"results":"31","hashOfConfig":"18"},{"size":2336,"mtime":1610042742360,"results":"32","hashOfConfig":"18"},{"size":5276,"mtime":1610149022536,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pe5mvf",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"39"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\appglue\\appglue.site\\src\\NavFrame\\NavFrame.stories.tsx",[],"C:\\appglue\\appglue.site\\src\\NavFrame\\NavFrame.tsx",["72"],"import React from 'react';\r\nimport { FrameProps, Layout } from './FrameProps';\r\nimport TopBar from './TopBar';\r\nimport TopBarNav from './TopNavBar';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormDialog from '../Modal/ThemeModal';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport { createTheme } from '../utils/Theme';\r\nexport function NavFrame(props: { layoutOptions: FrameProps }) {\r\n  // top bar\r\n  // either side bar nav or top bar nav\r\n  // render content\r\n  const { layout } = props.layoutOptions;\r\n  console.log('layout', props.layoutOptions.layoutWidth);\r\n  const theme = createTheme(props.layoutOptions);\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Grid>\r\n        {layout === Layout.VERTICAL && <TopBar {...props} />}\r\n        {layout === Layout.HORIZONTAL && <TopBarNav {...props} />}\r\n      </Grid>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n",["73","74"],"C:\\appglue\\appglue.site\\src\\NavFrame\\TopNavBar.tsx",["75","76","77","78","79","80","81","82"],"import React from 'react';\r\nimport { FrameProps } from './FrameProps';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport clsx from 'clsx';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { List, Divider } from '@material-ui/core';\r\nimport TopMenu from './NavBarData';\r\nimport LogoIocn from '../assets/logo.svg';\r\nimport { PageRoutes } from '../Pages/PageRoutes';\r\nimport { LayoutWidth } from './FrameProps';\r\nimport { ContentTheme } from './FrameProps';\r\nimport { TopBarTheme } from './FrameProps';\r\nimport { NavBarTheme } from './FrameProps';\r\nimport { addToObject } from '../utils/helpers';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    background: 'rgba(235,244,250,0.2)',\r\n    color: '#fff',\r\n    '&:hover': {\r\n      backgroundColor: 'rgba(235,244,250,0.2)',\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    width: '240px',\r\n    marginLeft: theme.spacing(6),\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: '240px',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(1, 1, 0),\r\n    float: 'right',\r\n    display: 'inline-block',\r\n    color: '#fff',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    fontSize: '14px',\r\n    padding: theme.spacing(1),\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '15ch',\r\n    },\r\n  },\r\n  appBar: {\r\n    height: '72px',\r\n    zIndex: theme.zIndex.drawer + 2,\r\n    // width: `calc(100% - 73px)`,\r\n    background: 'linear-gradient(90.16deg, #49A0D5 -0.48%, #00D1C1 102.05%)',\r\n    color: theme.palette.common.white,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  Iconbutton: {\r\n    color: '#ffffff',\r\n    marginLeft: '44px',\r\n  },\r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  HorizontalMenu: {\r\n    display: 'flex',\r\n    color: '#677C95',\r\n    background: '#fff',\r\n    height: '40px',\r\n  },\r\n  MenuIcon: {\r\n    color: '#00D1C1',\r\n    minWidth: '38px',\r\n  },\r\n  LogoBlock: {\r\n    margin: ' 12px 33px',\r\n    [theme.breakpoints.up('sm')]: {\r\n      margin: ' 4px 33px',\r\n    },\r\n  },\r\n  LogoIcon: {\r\n    paddingRight: '10px',\r\n  },\r\n  ButtonMenu: {\r\n    padding: '0',\r\n    margin: '0 0 0 24px',\r\n    width: 'unset',\r\n  },\r\n  LogoMenuIcon: {\r\n    color: '#ffffff',\r\n  },\r\n  content: {\r\n    backgroundColor: '#f7fbfd',\r\n    lexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  userName: {\r\n    padding: '13px 0 0 10px',\r\n  },\r\n  borderGrow: {\r\n    maxWidth: '1440px',\r\n    margin: '0 auto',\r\n  },\r\n  lightContentTheme: {\r\n    background: '#f7fbfd',\r\n  },\r\n  darkContentTheme: {\r\n    background: '#424C5C',\r\n  },\r\n  lightTopBar: {\r\n    background: theme.palette.primary.light,\r\n  },\r\n  darkTopBar: {\r\n    background: theme.palette.primary.dark,\r\n  },\r\n  coloredTopBar: {\r\n    // background: theme.palette.primary.main,\r\n  },\r\n  darkNavBar: {\r\n    background: theme.palette.primary.dark,\r\n  },\r\n  lightNavBar: {\r\n    background: theme.palette.primary.light,\r\n  },\r\n  coloredNavBar: {\r\n    // background: theme.palette.primary.main,\r\n  },\r\n  arrow: {\r\n    paddingLeft: '7px',\r\n    transition: '.2s',\r\n  },\r\n}));\r\n\r\nexport default function TopBarNav(props: { layoutOptions: FrameProps }) {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  // const handleProfileMenuOpen = (e) => {\r\n  //   setAnchorEl(e.currentTarget);\r\n  // };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n\r\n  // const handleMobileMenuOpen = (e) => {\r\n  //   setMobileMoreAnchorEl(e.currentTarget);\r\n  // };\r\n\r\n  let previous = {};\r\n\r\n  React.useEffect(() => {\r\n    PageRoutes.getRootPages().map(page => {\r\n      if (page.getSubPages().length > 0) {\r\n        const result = addToObject(previous, page.name, false);\r\n        previous = result;\r\n        setLinksWithSubpages(result);\r\n      }\r\n      page.getSubPages().map(subpage => {\r\n        if (subpage.getSubPages().length > 0) {\r\n          const result = addToObject(previous, page.name, false);\r\n          previous = result;\r\n          setLinksWithSubpages(result);\r\n        }\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const handleToggleSubpages = (name: string) => {\r\n    const copy: any = Object.assign({}, linksWithSubpages);\r\n    copy[name] = !copy[name];\r\n    setLinksWithSubpages(copy);\r\n  };\r\n\r\n  const [linksWithSubpages, setLinksWithSubpages] = React.useState<any>({});\r\n\r\n  const menuId = 'primary-search-account-menu';\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      <MenuItem onClick={handleMenuClose}>Edit Profile</MenuItem>\r\n      <MenuItem onClick={handleMenuClose}>Logout</MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = 'primary-search-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem>\r\n        <IconButton\r\n          className={classes.Iconbutton}\r\n          aria-label=\"show 4 new mails\"\r\n          color=\"inherit\"\r\n        >\r\n          <FullscreenIcon />\r\n        </IconButton>\r\n        <p>Messages</p>\r\n      </MenuItem>\r\n\r\n      <MenuItem>\r\n        <IconButton\r\n          className={classes.Iconbutton}\r\n          aria-label=\"show 4 new mails\"\r\n          color=\"inherit\"\r\n        >\r\n          <Badge badgeContent={10} color=\"secondary\">\r\n            <ChatBubbleOutlineIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Messages</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <IconButton\r\n          className={classes.Iconbutton}\r\n          aria-label=\"show 11 new notifications\"\r\n          color=\"inherit\"\r\n        >\r\n          <Badge badgeContent={1} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Notifications</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <IconButton\r\n          className={classes.Iconbutton}\r\n          aria-label=\"account of current user\"\r\n          aria-controls=\"primary-search-account-menu\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n        >\r\n          <AccountCircle />\r\n        </IconButton>\r\n        <p>Profile</p>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        classes.grow,\r\n        props.layoutOptions.layoutWidth === LayoutWidth.BOXED &&\r\n          classes.borderGrow\r\n      )}\r\n    >\r\n      <div\r\n        className={clsx(\r\n          classes.grow,\r\n          props.layoutOptions.layoutWidth === LayoutWidth.BOXED &&\r\n            classes.borderGrow\r\n        )}\r\n      >\r\n        <AppBar\r\n          position=\"static\"\r\n          style={\r\n            props.layoutOptions.topBarTheme === TopBarTheme.COLORED\r\n              ? {\r\n                  background: props.layoutOptions.colorGradientEnd,\r\n                }\r\n              : {}\r\n          }\r\n          className={clsx(\r\n            classes.appBar,\r\n            props.layoutOptions.topBarTheme === TopBarTheme.DARK &&\r\n              classes.darkTopBar,\r\n            props.layoutOptions.topBarTheme === TopBarTheme.COLORED &&\r\n              classes.coloredTopBar,\r\n            props.layoutOptions.topBarTheme === TopBarTheme.LIGHT &&\r\n              classes.lightTopBar\r\n          )}\r\n        >\r\n          <Toolbar className={classes.LogoBlock}>\r\n            <img src={LogoIocn} className={classes.LogoIcon} />\r\n            <Typography>AppGlue</Typography>\r\n            <IconButton\r\n              className={classes.Iconbutton}\r\n              edge=\"end\"\r\n              aria-label=\"account of current user\"\r\n              aria-controls={menuId}\r\n              aria-haspopup=\"true\"\r\n              color=\"inherit\"\r\n            >\r\n              <AccountCircle />\r\n            </IconButton>\r\n            <div className={classes.search}>\r\n              <div className={classes.searchIcon}>\r\n                <SearchIcon />\r\n              </div>\r\n              <InputBase\r\n                placeholder=\"Search…\"\r\n                classes={{\r\n                  root: classes.inputRoot,\r\n                  input: classes.inputInput,\r\n                }}\r\n                inputProps={{ 'aria-label': 'search' }}\r\n              />\r\n            </div>\r\n            <div className={classes.grow} />\r\n            <div className={classes.sectionDesktop}>\r\n              <IconButton\r\n                className={classes.Iconbutton}\r\n                aria-label=\"show 4 new mails\"\r\n                color=\"inherit\"\r\n              >\r\n                <FullscreenIcon\r\n                  style={{ fontSize: '30px' }}\r\n                  className={classes.LogoMenuIcon}\r\n                />\r\n              </IconButton>\r\n              <IconButton\r\n                className={classes.Iconbutton}\r\n                aria-label=\"show 4 new mails\"\r\n                color=\"inherit\"\r\n              >\r\n                <Badge badgeContent={10} color=\"secondary\">\r\n                  <ChatBubbleOutlineIcon className={classes.LogoMenuIcon} />\r\n                </Badge>\r\n              </IconButton>\r\n              <IconButton\r\n                className={classes.Iconbutton}\r\n                aria-label=\"show 17 new notifications\"\r\n                color=\"inherit\"\r\n              >\r\n                <Badge badgeContent={1} color=\"secondary\">\r\n                  <NotificationsIcon className={classes.LogoMenuIcon} />\r\n                </Badge>\r\n              </IconButton>\r\n              <IconButton\r\n                className={classes.Iconbutton}\r\n                edge=\"end\"\r\n                aria-label=\"account of current user\"\r\n                aria-controls={menuId}\r\n                aria-haspopup=\"true\"\r\n                color=\"inherit\"\r\n              >\r\n                <AccountCircle className={classes.LogoMenuIcon} />\r\n              </IconButton>\r\n              <Typography className={classes.userName}>John Doe</Typography>\r\n            </div>\r\n            <div className={classes.sectionMobile}>\r\n              <IconButton\r\n                className={classes.Iconbutton}\r\n                aria-label=\"show more\"\r\n                aria-controls={mobileMenuId}\r\n                aria-haspopup=\"true\"\r\n                color=\"inherit\"\r\n              >\r\n                <MoreIcon className={classes.LogoMenuIcon} />\r\n              </IconButton>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n        {renderMobileMenu}\r\n        {renderMenu}\r\n      </div>\r\n      <div>\r\n        <List\r\n          style={\r\n            props.layoutOptions.navBarTheme === NavBarTheme.COLORED\r\n              ? {\r\n                  background: props.layoutOptions.colorGradientEnd,\r\n                }\r\n              : {}\r\n          }\r\n          className={clsx(\r\n            classes.HorizontalMenu,\r\n            props.layoutOptions.navBarTheme === NavBarTheme.DARK &&\r\n              classes.darkNavBar,\r\n            props.layoutOptions.navBarTheme === NavBarTheme.COLORED &&\r\n              classes.coloredNavBar,\r\n            props.layoutOptions.navBarTheme === NavBarTheme.LIGHT &&\r\n              classes.lightNavBar\r\n          )}\r\n        >\r\n          {PageRoutes.getRootPages().map(page => {\r\n            return (\r\n              <>\r\n                <NavItem\r\n                  page={page}\r\n                  classes={classes}\r\n                  handleToggleSubpages={handleToggleSubpages}\r\n                />\r\n              </>\r\n            );\r\n          })}\r\n        </List>\r\n      </div>\r\n      <main\r\n        className={clsx(\r\n          classes.content,\r\n          props.layoutOptions.contentTheme === ContentTheme.LIGHT &&\r\n            classes.lightContentTheme,\r\n          props.layoutOptions.contentTheme === ContentTheme.DARK &&\r\n            classes.darkContentTheme\r\n        )}\r\n      >\r\n        <Typography>hello AppGluer</Typography>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NavItem = ({\r\n  page,\r\n  classes,\r\n  isOpened = false,\r\n  handleToggleSubpages,\r\n}: {\r\n  page: any;\r\n  classes: any;\r\n  isOpened?: boolean;\r\n  handleToggleSubpages: (name: string) => void;\r\n}) => {\r\n  const subpages = page.getSubPages();\r\n\r\n  return (\r\n    <ListItem button className={classes.ButtonMenu}>\r\n      <ListItemIcon className={classes.MenuIcon}>\r\n        {page.renderIcon()}\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <span>{page.name}</span>\r\n      </ListItemText>\r\n      {subpages.length > 0 && (\r\n        <KeyboardArrowDownIcon\r\n          onClick={() => handleToggleSubpages(page.name)}\r\n          className={clsx(classes.arrow, isOpened && classes.opened_arrow)}\r\n        />\r\n      )}\r\n    </ListItem>\r\n  );\r\n};\r\n","C:\\appglue\\appglue.site\\src\\NavFrame\\TopBar.tsx",["83","84","85","86","87","88","89","90"],"import React from 'react';\r\nimport {\r\n  FrameProps,\r\n  LayoutWidth,\r\n  SideBarType,\r\n  TopBarTheme,\r\n} from './FrameProps';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport TopNavbar from './TopNavBar';\r\nimport SideBarNav from './SideNavBar';\r\nimport { Drawer } from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport clsx from 'clsx';\r\n\r\nimport ScanIcon from '../assets/Scan.svg';\r\nimport NotificationsList from './ToBarNotifications';\r\nimport { NavBarTheme } from './FrameProps';\r\nimport { ContentTheme } from './FrameProps';\r\n\r\nexport default function TopBar(props: { layoutOptions: FrameProps }) {\r\n  // if vertical, collapse top bar hamburg\r\n  // search\r\n  // -- on right\r\n  // full screen\r\n  // chat with counter\r\n  // notifications with counter\r\n  // profile (name, pic, drop down)\r\n  //   - edit profile\r\n  //   - edit look and feel\r\n  //   - logout\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n    borderGrow: {\r\n      maxWidth: '1440px',\r\n      margin: '0 auto',\r\n    },\r\n    search: {\r\n      position: 'relative',\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: 'rgb(235,244,250)',\r\n      color: fade(theme.palette.action.selected, 0.8),\r\n      '&:hover': {\r\n        backgroundColor: fade(theme.palette.info.light, 0.25),\r\n      },\r\n      marginRight: theme.spacing(2),\r\n      marginLeft: '0 !important',\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(3),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(1, 2, 0),\r\n      float: 'right',\r\n      display: 'inline-block',\r\n      color: '#93A9BF',\r\n    },\r\n    inputRoot: {\r\n      color: 'inherit',\r\n    },\r\n    inputInput: {\r\n      fontSize: '14px',\r\n      padding: theme.spacing(1),\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('md')]: {\r\n        width: '15ch',\r\n      },\r\n    },\r\n    sectionDesktop: {\r\n      display: 'none',\r\n      [theme.breakpoints.up('md')]: {\r\n        display: 'flex',\r\n      },\r\n    },\r\n    sectionMobile: {\r\n      display: 'flex',\r\n      [theme.breakpoints.up('md')]: {\r\n        display: 'none',\r\n      },\r\n    },\r\n    root: {\r\n      width: '1440px',\r\n      display: 'flex',\r\n      flexGrow: 1,\r\n    },\r\n    // toolbar: {\r\n    //   paddingRight: 24, // keep right padding when drawer closed\r\n    // },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      height: '73px',\r\n      padding: '0 8px',\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      // width: `calc(100% - 73px)`,\r\n      background: '#fff',\r\n      position: 'relative',\r\n      left: `${drawerShiftWidth}px`,\r\n      transition: theme.transitions.create(['width', 'margin', 'left'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      [theme.breakpoints.down('xs')]: {\r\n        left: `${drawerShiftWidth - 46}px`,\r\n        width: `calc(100% - ${drawerWidth}px + 238px)`,\r\n      },\r\n      [theme.breakpoints.between('xs', 'sm')]: {\r\n        left: `${drawerShiftWidth - 31}px`,\r\n        width: `calc(100% - ${drawerWidth}px + 224px)`,\r\n      },\r\n      [theme.breakpoints.up('sm')]: {\r\n        left: `${drawerShiftWidth - 31}px`,\r\n        width: `calc(100% - ${drawerShiftWidth}px + 32px)`,\r\n      },\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      left: '1px',\r\n      transition: theme.transitions.create(['width', 'margin', 'left'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      [theme.breakpoints.down('xs')]: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n      },\r\n      [theme.breakpoints.between('xs', 'sm')]: {\r\n        left: `${181 - drawerWidth}px`,\r\n        width: `calc(100% - ${drawerWidth}px + 116px)`,\r\n      },\r\n      [theme.breakpoints.between('sm', 'md')]: {\r\n        left: `${105 - drawerWidth}px`,\r\n        width: `calc(100% - ${drawerWidth}px + 193px)`,\r\n      },\r\n      [theme.breakpoints.up('md')]: {\r\n        left: '1px',\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n      },\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(1),\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n    menuButtonHidden: {\r\n      display: 'none',\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    drawerPaper: {\r\n      float: 'left',\r\n      position: 'relative',\r\n      top: '-73px',\r\n      whiteSpace: 'nowrap',\r\n      width:\r\n        props.layoutOptions.sideBarType === SideBarType.COMPACT\r\n          ? `${drawerWidth}px !important`\r\n          : drawerWidth,\r\n      height: '100vh',\r\n      color: theme.palette.common.white,\r\n      // background: theme.palette.primary.main,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      [theme.breakpoints.down('xs')]: {\r\n        width: theme.spacing(37),\r\n      },\r\n      [theme.breakpoints.between('xs', 'sm')]: {\r\n        width: theme.spacing(22) + 4,\r\n      },\r\n      [theme.breakpoints.between('sm', 'md')]: {\r\n        width: theme.spacing(13),\r\n      },\r\n      [theme.breakpoints.up('md')]: {\r\n        width: theme.spacing(37),\r\n      },\r\n    },\r\n    drawerPaperClose: {\r\n      overflowX: 'hidden',\r\n      height: '100vh',\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up('xs')]: {\r\n        width: theme.spacing(9),\r\n      },\r\n    },\r\n    Iconbutton: {\r\n      color: '#93A9BF',\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n      backgroundColor: '#f7fbfd',\r\n      flexGrow: 1,\r\n      height: '100vh',\r\n      overflow: 'auto',\r\n    },\r\n\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      display: 'flex',\r\n      overflow: 'auto',\r\n      flexDirection: 'column',\r\n    },\r\n    userName: {\r\n      color: '#93A9BF',\r\n      padding: '14px 8px',\r\n    },\r\n    NotificationMenu: {},\r\n    NotificationIcon: {},\r\n    NotificationText: {\r\n      fontSize: '14px',\r\n    },\r\n    NotificationReceiveDate: {\r\n      fontSize: '10px !important',\r\n    },\r\n    lightTopBar: {\r\n      background: theme.palette.primary.light,\r\n    },\r\n    darkTopBar: {\r\n      background: theme.palette.primary.dark,\r\n    },\r\n    coloredTopBar: {\r\n      // background: theme.palette.primary.main,\r\n    },\r\n    lightDrawerPaper: {\r\n      background: theme.palette.primary.light,\r\n    },\r\n    darkDrawerPaper: {\r\n      background: theme.palette.primary.dark,\r\n    },\r\n    coloredDrawerPaper: {\r\n      // background: theme.palette.primary.main,\r\n    },\r\n    lightContentTheme: {\r\n      background: '#f7fbfd',\r\n    },\r\n    darkContentTheme: {\r\n      background: '#424C5C',\r\n    },\r\n  }));\r\n\r\n  const drawerWidth =\r\n    props.layoutOptions.sideBarType === SideBarType.COMPACT ? 146 : 296;\r\n  const drawerShiftWidth = 104;\r\n\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n  const [\r\n    notificationAnchorEl,\r\n    setNotificationAnchorEl,\r\n  ] = React.useState<null | HTMLElement>(null);\r\n  const [\r\n    profileAnchorEl,\r\n    setProfileAnchorEl,\r\n  ] = React.useState<null | HTMLElement>(null);\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  // const handleProfileMenuOpen = (e) => {\r\n  //   setAnchorEl(e.currentTarget);\r\n  // };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n\r\n  const handleNotificationClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    setNotificationAnchorEl(e.currentTarget);\r\n  };\r\n\r\n  const handleNotificationClose = () => {\r\n    setNotificationAnchorEl(null);\r\n  };\r\n\r\n  const handleProfileClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    setProfileAnchorEl(e.currentTarget);\r\n  };\r\n\r\n  const handleProfileClose = () => {\r\n    setProfileAnchorEl(null);\r\n  };\r\n\r\n  const handleRenderPage = (renderPage: any) => {\r\n    setCurrentPageContent(renderPage());\r\n  };\r\n\r\n  // const handleMobileMenuOpen = (e) => {\r\n  //   setMobileMoreAnchorEl(e.currentTarget);\r\n  // };\r\n\r\n  const menuId = 'primary-search-account-menu';\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      <MenuItem onClick={handleMenuClose}>Edit Profile</MenuItem>\r\n      <MenuItem onClick={handleMenuClose}>Logout</MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = 'primary-search-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem>\r\n        <IconButton\r\n          className={classes.Iconbutton}\r\n          aria-label=\"show 4 new mails\"\r\n          color=\"inherit\"\r\n        >\r\n          <FullscreenIcon />\r\n        </IconButton>\r\n        <p>Messages</p>\r\n      </MenuItem>\r\n\r\n      <MenuItem>\r\n        <IconButton\r\n          className={classes.Iconbutton}\r\n          aria-label=\"show 4 new mails\"\r\n          color=\"inherit\"\r\n        >\r\n          <Badge badgeContent={10} color=\"secondary\">\r\n            <ChatBubbleOutlineIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Messages</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <IconButton\r\n          className={classes.Iconbutton}\r\n          aria-label=\"show 11 new notifications\"\r\n          color=\"inherit\"\r\n        >\r\n          <Badge badgeContent={1} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Notifications</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <IconButton\r\n          className={classes.Iconbutton}\r\n          aria-label=\"account of current user\"\r\n          aria-controls=\"primary-search-account-menu\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n        >\r\n          <AccountCircle />\r\n        </IconButton>\r\n        <p>Profile</p>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const [open, setOpen] = React.useState(\r\n    props.layoutOptions.sideBarType !== SideBarType.ICON\r\n  );\r\n\r\n  const [currentPageContent, setCurrentPageContent] = React.useState(\r\n    <Typography>hello AppGluer</Typography>\r\n  );\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(!open);\r\n  };\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        classes.grow,\r\n        props.layoutOptions.layoutWidth === LayoutWidth.BOXED &&\r\n          classes.borderGrow\r\n      )}\r\n    >\r\n      <AppBar\r\n        position=\"absolute\"\r\n        style={\r\n          props.layoutOptions.topBarTheme === TopBarTheme.COLORED\r\n            ? {\r\n                background: props.layoutOptions.colorGradientEnd,\r\n              }\r\n            : {}\r\n        }\r\n        className={clsx(\r\n          classes.appBar,\r\n          open && classes.appBarShift,\r\n          props.layoutOptions.topBarTheme === TopBarTheme.DARK &&\r\n            classes.darkTopBar,\r\n          props.layoutOptions.topBarTheme === TopBarTheme.COLORED &&\r\n            classes.coloredTopBar,\r\n          props.layoutOptions.topBarTheme === TopBarTheme.LIGHT &&\r\n            classes.lightTopBar\r\n        )}\r\n        elevation={0}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, classes.Iconbutton)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </div>\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton\r\n              className={classes.Iconbutton}\r\n              aria-label=\"show 4 new mails\"\r\n              color=\"inherit\"\r\n            >\r\n              <FullscreenIcon style={{ fontSize: '30px' }} />\r\n            </IconButton>\r\n            <IconButton\r\n              className={classes.Iconbutton}\r\n              aria-label=\"show 4 new mails\"\r\n              color=\"inherit\"\r\n            >\r\n              <Badge badgeContent={10} color=\"secondary\">\r\n                <ChatBubbleOutlineIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <IconButton\r\n              className={classes.Iconbutton}\r\n              aria-label=\"show 17 new notifications\"\r\n              aria-haspopup=\"true\"\r\n              aria-controls=\"notification-menu\"\r\n              color=\"inherit\"\r\n              onClick={handleNotificationClick}\r\n            >\r\n              <Badge badgeContent={1} color=\"secondary\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <Menu\r\n              id=\"notification-menu\"\r\n              anchorEl={notificationAnchorEl}\r\n              keepMounted\r\n              open={Boolean(notificationAnchorEl)}\r\n              onClose={handleNotificationClose}\r\n              elevation={0}\r\n              getContentAnchorEl={null}\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n              }}\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n              }}\r\n              PaperProps={{\r\n                style: {\r\n                  maxHeight: 268,\r\n                  width: '286px',\r\n                },\r\n              }}\r\n            >\r\n              {NotificationsList.map(item => (\r\n                <MenuItem\r\n                  onClick={handleNotificationClose}\r\n                  key={item.id}\r\n                  className={classes.NotificationMenu}\r\n                >\r\n                  <div>\r\n                    <ListItemIcon className={classes.NotificationIcon}>\r\n                      {<item.icon />}\r\n                    </ListItemIcon>\r\n                  </div>\r\n                  <div>\r\n                    <ListItemText className={classes.NotificationText}>\r\n                      {item.text}\r\n                    </ListItemText>\r\n                    <ListItemText className={classes.NotificationReceiveDate}>\r\n                      {item.dateOfReceiving}\r\n                    </ListItemText>\r\n                  </div>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n            <IconButton\r\n              className={classes.Iconbutton}\r\n              edge=\"end\"\r\n              aria-label=\"account of current user\"\r\n              aria-haspopup=\"true\"\r\n              color=\"inherit\"\r\n            >\r\n              <AccountCircle />\r\n            </IconButton>\r\n            <Typography className={classes.userName}>John Doe</Typography>\r\n          </div>\r\n\r\n          <div className={classes.sectionMobile}>\r\n            <IconButton\r\n              className={classes.Iconbutton}\r\n              aria-label=\"show more\"\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup=\"true\"\r\n              color=\"inherit\"\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <SideBarNav\r\n          handleRenderPage={handleRenderPage}\r\n          color={props.layoutOptions.color}\r\n          colorGradientEnd={props.layoutOptions.colorGradientEnd}\r\n          navBarTheme={props.layoutOptions.navBarTheme}\r\n          variant={props.layoutOptions.sideBarType}\r\n          sideBarType={props.layoutOptions.sideBarType}\r\n        />\r\n      </Drawer>\r\n      <main\r\n        className={clsx(\r\n          classes.content,\r\n          props.layoutOptions.contentTheme === ContentTheme.LIGHT &&\r\n            classes.lightContentTheme,\r\n          props.layoutOptions.contentTheme === ContentTheme.DARK &&\r\n            classes.darkContentTheme\r\n        )}\r\n      >\r\n        <div className={classes.appBarSpacer} />\r\n        {/* {currentPageContent} */}\r\n      </main>\r\n      {renderMobileMenu}\r\n      {renderMenu}\r\n    </div>\r\n  );\r\n}\r\n","C:\\appglue\\appglue.site\\src\\utils\\Theme.tsx",[],"C:\\appglue\\appglue.site\\src\\NavFrame\\NavBarData.tsx",[],"C:\\appglue\\appglue.site\\src\\NavFrame\\SideNavBar.tsx",["91","92","93","94","95","96","97","98","99"],"import React from 'react';\r\nimport { FrameProps } from './FrameProps';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { List, Typography, Divider, SvgIcon, Link } from '@material-ui/core';\r\nimport TopMenu from './NavBarData';\r\nimport LogoIocn from '../assets/logo.svg';\r\nimport { PageRoutes } from '../Pages/PageRoutes';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport { NavBarTheme } from './FrameProps';\r\nimport clsx from 'clsx';\r\nimport { SideBarType } from './FrameProps';\r\nimport { addToObject } from '../utils/helpers';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  VersionText: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    left: '72px',\r\n  },\r\n  Icon: {\r\n    color: '#fff',\r\n    minWidth: '45px',\r\n    paddingLeft: '10px',\r\n    [theme.breakpoints.between('xs', 'sm')]: {\r\n      marginBottom: '5px',\r\n      marginLeft: '10px',\r\n    },\r\n  },\r\n  MenuText: {\r\n    fontSize: '14px',\r\n    fontWeight: 700,\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    [theme.breakpoints.between('sm', 'md')]: {\r\n      display: 'none',\r\n    },\r\n    [theme.breakpoints.between('md', 'lg')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  divider: {\r\n    background: '#fff',\r\n    margin: '0 20px 10px',\r\n  },\r\n  listItem: {\r\n    padding: '5px 16px ',\r\n    marginBottom: '10px',\r\n    [theme.breakpoints.between('xs', 'sm')]: {\r\n      flexDirection: 'column',\r\n      marginBottom: '12px',\r\n    },\r\n  },\r\n  compactListItem: {\r\n    flexDirection: 'column',\r\n    marginBottom: '12px',\r\n  },\r\n  LogoText: {\r\n    paddingLeft: '10px',\r\n    [theme.breakpoints.between('xs', 'sm')]: {\r\n      paddingLeft: '0',\r\n    },\r\n    [theme.breakpoints.between('sm', 'md')]: {\r\n      visibility: 'hidden ',\r\n    },\r\n    [theme.breakpoints.up('md')]: {\r\n      visibility: 'visible',\r\n    },\r\n  },\r\n  logo: {\r\n    padding: '15px 20px 25px',\r\n    [theme.breakpoints.between('xs', 'sm')]: {\r\n      padding: '15px 20px 5px',\r\n      flexDirection: 'column',\r\n    },\r\n  },\r\n  compactLogo: {\r\n    padding: '15px 20px 5px',\r\n    flexDirection: 'column',\r\n  },\r\n  arrow: {\r\n    paddingRight: '10px',\r\n    transition: '.2s',\r\n  },\r\n  sideNavBarContainer: {\r\n    height: '100%',\r\n  },\r\n  lightSideNavBar: {\r\n    background: theme.palette.primary.light,\r\n  },\r\n  darkSideNavBar: {\r\n    background: theme.palette.primary.dark,\r\n  },\r\n  coloredSideNavBar: {\r\n    // background: theme.palette.primary.main,\r\n  },\r\n  opened_arrow: {\r\n    transform: 'rotate(180deg)',\r\n    paddingLeft: '10px',\r\n  },\r\n  subpagesInner: {\r\n    transition: '.5s',\r\n  },\r\n  subpagesInnerClosed: {\r\n    opacity: '0',\r\n    transition: '.2s',\r\n  },\r\n  subpagesInnerOpened: {\r\n    opacity: '1',\r\n    transition: '.2s',\r\n  },\r\n  subpagesContent: {\r\n    maxHeight: '0',\r\n    transition: 'max-height .5s',\r\n    overflow: 'hidden',\r\n  },\r\n  subpagesOpened: {\r\n    maxHeight: '500px',\r\n    overflow: 'hidden',\r\n  },\r\n}));\r\n\r\nexport default function SideBarNav(props: {\r\n  variant: string;\r\n  color: string;\r\n  navBarTheme: NavBarTheme;\r\n  colorGradientEnd: string;\r\n  sideBarType: SideBarType;\r\n  handleRenderPage: any;\r\n}) {\r\n  const classes = useStyles();\r\n  // render pages\r\n  //  - category (w/icon)\r\n  //    - sub categories (if exist)\r\n  //    - page name\r\n\r\n  let previous = {};\r\n\r\n  React.useEffect(() => {\r\n    PageRoutes.getRootPages().map(page => {\r\n      if (page.getSubPages().length > 0) {\r\n        const result = addToObject(previous, page.name, false);\r\n        previous = result;\r\n        setLinksWithSubpages(result);\r\n      }\r\n      page.getSubPages().map(subpage => {\r\n        if (subpage.getSubPages().length > 0) {\r\n          const result = addToObject(previous, page.name, false);\r\n          previous = result;\r\n          setLinksWithSubpages(result);\r\n        }\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const handleToggleSubpages = (name: string) => {\r\n    const copy: any = Object.assign({}, linksWithSubpages);\r\n    copy[name] = !copy[name];\r\n    setLinksWithSubpages(copy);\r\n  };\r\n\r\n  const [linksWithSubpages, setLinksWithSubpages] = React.useState<any>({});\r\n  return (\r\n    <div\r\n      style={\r\n        props.navBarTheme === NavBarTheme.COLORED\r\n          ? {\r\n              background: props.colorGradientEnd,\r\n            }\r\n          : {}\r\n      }\r\n      className={clsx(\r\n        classes.sideNavBarContainer,\r\n        props.navBarTheme === NavBarTheme.LIGHT && classes.lightSideNavBar,\r\n        props.navBarTheme === NavBarTheme.DARK && classes.darkSideNavBar,\r\n        props.navBarTheme === NavBarTheme.COLORED && classes.coloredSideNavBar\r\n      )}\r\n    >\r\n      <List>\r\n        <ListItem\r\n          className={clsx(\r\n            classes.logo,\r\n            props.sideBarType === SideBarType.COMPACT && classes.compactLogo\r\n          )}\r\n        >\r\n          <img src={LogoIocn} />\r\n          <ListItemText className={classes.LogoText}>AppGlue</ListItemText>\r\n        </ListItem>\r\n        <Divider className={classes.divider}></Divider>\r\n        {PageRoutes.getRootPages().map(page => (\r\n          <>\r\n            <NavItem\r\n              isOpened={linksWithSubpages[page.name]}\r\n              handleToggleSubpages={handleToggleSubpages}\r\n              key={page.name}\r\n              page={page}\r\n              classes={classes}\r\n              props={props}\r\n            />\r\n            <div\r\n              className={clsx(\r\n                classes.subpagesContent,\r\n                linksWithSubpages[page.name] && classes.subpagesOpened\r\n              )}\r\n            >\r\n              {\r\n                // linksWithSubpages[page.name] ?\r\n                page.getSubPages().map(subpage => (\r\n                  <div\r\n                    className={clsx(\r\n                      classes.subpagesInner,\r\n                      linksWithSubpages[page.name]\r\n                        ? classes.subpagesInnerOpened\r\n                        : classes.subpagesInnerClosed\r\n                    )}\r\n                  >\r\n                    <NavItem\r\n                      isOpened={linksWithSubpages[subpage.name]}\r\n                      handleToggleSubpages={handleToggleSubpages}\r\n                      key={subpage.name}\r\n                      page={subpage}\r\n                      classes={classes}\r\n                      props={props}\r\n                    />\r\n                    {/* <div\r\n                        className={clsx(\r\n                          classes.subpagesContent,\r\n                          linksWithSubpages[page.name] && classes.subpagesOpened\r\n                        )}\r\n                      >\r\n                        {linksWithSubpages[subpage.name]\r\n                          ? subpage\r\n                              .getSubPages()\r\n                              .map(secondSubpage => (\r\n                                <NavItem\r\n                                  handleToggleSubpages={handleToggleSubpages}\r\n                                  key={secondSubpage.name}\r\n                                  page={secondSubpage}\r\n                                  classes={classes}\r\n                                  props={props}\r\n                                />\r\n                              ))\r\n                          : null}\r\n                      </div> */}\r\n                  </div>\r\n                ))\r\n                // : null\r\n              }\r\n            </div>\r\n          </>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NavItem = ({\r\n  page,\r\n  classes,\r\n  props,\r\n  handleToggleSubpages,\r\n  isOpened = false,\r\n}: {\r\n  page: any;\r\n  classes: any;\r\n  props: any;\r\n  isOpened?: boolean;\r\n  handleToggleSubpages: (name: string) => void;\r\n}) => {\r\n  const subpages = page.getSubPages();\r\n  return (\r\n    <ListItem\r\n      button\r\n      className={clsx(\r\n        classes.listItem,\r\n        props.sideBarType === SideBarType.COMPACT && classes.compactListItem\r\n      )}\r\n    >\r\n      <ListItemIcon\r\n        onClick={() => props.handleRenderPage(page.renderPage)}\r\n        className={classes.Icon}\r\n      >\r\n        {page.renderIcon()}\r\n      </ListItemIcon>\r\n      <ListItemText disableTypography className={classes.MenuText}>\r\n        <span onClick={() => props.handleRenderPage(page.renderPage)}>\r\n          {page.name}\r\n        </span>\r\n        {subpages.length > 0 && (\r\n          <KeyboardArrowDownIcon\r\n            onClick={() => handleToggleSubpages(page.name)}\r\n            style={\r\n              props.sideBarType === SideBarType.COMPACT\r\n                ? { display: 'none' }\r\n                : {}\r\n            }\r\n            className={clsx(classes.arrow, isOpened && classes.opened_arrow)}\r\n          />\r\n        )}\r\n      </ListItemText>\r\n    </ListItem>\r\n  );\r\n};\r\n","C:\\appglue\\appglue.site\\src\\index.tsx",[],"C:\\appglue\\appglue.site\\src\\reportWebVitals.ts",[],"C:\\appglue\\appglue.site\\src\\App.tsx",[],"C:\\appglue\\appglue.site\\src\\NavFrame\\FrameProps.tsx",["100"],"import React from 'react';\r\n\r\nexport enum SideBarType {\r\n  DEFAULT = 'default',\r\n  COMPACT = 'compact',\r\n  ICON = 'icon',\r\n}\r\n\r\nexport enum FrameSize {\r\n  STANDARD = 'standard',\r\n  FULLSCREEN = 'fullscreen',\r\n}\r\n\r\nexport enum LayoutWidth {\r\n  FULL_WIDTH = 'fullwidth',\r\n  BOXED = 'boxed', //1440px\r\n}\r\n\r\nexport enum TopBarTheme {\r\n  LIGHT = 'light',\r\n  DARK = 'dark',\r\n  COLORED = 'colored', // from tenant\r\n}\r\n\r\nexport enum NavBarTheme {\r\n  LIGHT = 'light',\r\n  DARK = 'dark',\r\n  COLORED = 'colored', // from tenant\r\n}\r\n\r\nexport enum ContentTheme {\r\n  LIGHT = 'light',\r\n  DARK = 'dark',\r\n}\r\n\r\nexport enum Layout {\r\n  VERTICAL = 'vertical',\r\n  HORIZONTAL = 'horizontal',\r\n}\r\n\r\nexport enum Preloader {\r\n  ON = 'on',\r\n  OFF = 'off',\r\n}\r\n\r\nexport enum Color {\r\n  DARK = '#9AA5B7',\r\n  LIGHT = 'light',\r\n}\r\n\r\n// these will be fetched from tenant then from user settings\r\nexport class FrameProps {\r\n  icon: JSX.Element | undefined;\r\n  teamName: string = 'AppGlue';\r\n  allTeams: string[] = ['AppGlue', 'OtherTeam', 'YetAnotherTeam'];\r\n\r\n  color: string = '#203156';\r\n  colorGradientEnd: string =\r\n    'linear-gradient(160.55deg, #49A0D5 1.59%, #00D1C1 94.21%)'; // gradients have 2 colors...\r\n\r\n  layout: Layout = Layout.HORIZONTAL;\r\n  sideBarType: SideBarType = SideBarType.DEFAULT;\r\n  frameSize: FrameSize = FrameSize.STANDARD;\r\n  layoutWidth: LayoutWidth = LayoutWidth.FULL_WIDTH;\r\n  topBarTheme: TopBarTheme = TopBarTheme.DARK;\r\n  navBarTheme: NavBarTheme = NavBarTheme.DARK;\r\n  contentTheme: ContentTheme = ContentTheme.LIGHT;\r\n  preloader: Preloader = Preloader.ON;\r\n  minWidth: number = 1500;\r\n}\r\n\r\nexport const CurrentFrameProps = new FrameProps();\r\nexport function getFrameOptions(): FrameProps {\r\n  return CurrentFrameProps;\r\n}\r\n","C:\\appglue\\appglue.site\\src\\NavFrame\\ToBarNotifications.tsx",[],"C:\\appglue\\appglue.site\\src\\Pages\\PageRoutes.tsx",[],"C:\\appglue\\appglue.site\\src\\utils\\helpers.ts",[],"C:\\appglue\\appglue.site\\src\\NavFrame\\Dropdown.tsx",[],"C:\\appglue\\appglue.site\\src\\Pages\\TeamPage.tsx",[],{"ruleId":"101","severity":1,"message":"102","line":7,"column":8,"nodeType":"103","messageId":"104","endLine":7,"endColumn":18},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"101","severity":1,"message":"109","line":3,"column":10,"nodeType":"103","messageId":"104","endLine":3,"endColumn":14},{"ruleId":"101","severity":1,"message":"110","line":12,"column":8,"nodeType":"103","messageId":"104","endLine":12,"endColumn":16},{"ruleId":"101","severity":1,"message":"111","line":19,"column":8,"nodeType":"103","messageId":"104","endLine":19,"endColumn":20},{"ruleId":"101","severity":1,"message":"112","line":25,"column":16,"nodeType":"103","messageId":"104","endLine":25,"endColumn":23},{"ruleId":"101","severity":1,"message":"113","line":26,"column":8,"nodeType":"103","messageId":"104","endLine":26,"endColumn":15},{"ruleId":"101","severity":1,"message":"114","line":177,"column":10,"nodeType":"103","messageId":"104","endLine":177,"endColumn":15},{"ruleId":"101","severity":1,"message":"115","line":177,"column":17,"nodeType":"103","messageId":"104","endLine":177,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":311,"column":13,"nodeType":"118","endLine":311,"endColumn":64},{"ruleId":"101","severity":1,"message":"111","line":26,"column":8,"nodeType":"103","messageId":"104","endLine":26,"endColumn":20},{"ruleId":"101","severity":1,"message":"119","line":27,"column":8,"nodeType":"103","messageId":"104","endLine":27,"endColumn":17},{"ruleId":"101","severity":1,"message":"120","line":30,"column":8,"nodeType":"103","messageId":"104","endLine":30,"endColumn":23},{"ruleId":"101","severity":1,"message":"121","line":33,"column":8,"nodeType":"103","messageId":"104","endLine":33,"endColumn":16},{"ruleId":"101","severity":1,"message":"122","line":35,"column":10,"nodeType":"103","messageId":"104","endLine":35,"endColumn":21},{"ruleId":"101","severity":1,"message":"123","line":290,"column":5,"nodeType":"103","messageId":"104","endLine":290,"endColumn":20},{"ruleId":"101","severity":1,"message":"124","line":318,"column":9,"nodeType":"103","messageId":"104","endLine":318,"endColumn":27},{"ruleId":"101","severity":1,"message":"125","line":322,"column":9,"nodeType":"103","messageId":"104","endLine":322,"endColumn":27},{"ruleId":"101","severity":1,"message":"126","line":2,"column":10,"nodeType":"103","messageId":"104","endLine":2,"endColumn":20},{"ruleId":"101","severity":1,"message":"127","line":7,"column":16,"nodeType":"103","messageId":"104","endLine":7,"endColumn":26},{"ruleId":"101","severity":1,"message":"128","line":7,"column":37,"nodeType":"103","messageId":"104","endLine":7,"endColumn":44},{"ruleId":"101","severity":1,"message":"129","line":7,"column":46,"nodeType":"103","messageId":"104","endLine":7,"endColumn":50},{"ruleId":"101","severity":1,"message":"113","line":8,"column":8,"nodeType":"103","messageId":"104","endLine":8,"endColumn":15},{"ruleId":"130","severity":1,"message":"131","line":142,"column":40,"nodeType":"132","messageId":"133","endLine":142,"endColumn":42},{"ruleId":"134","severity":1,"message":"135","line":145,"column":20,"nodeType":"103","endLine":145,"endColumn":26},{"ruleId":"130","severity":1,"message":"131","line":148,"column":38,"nodeType":"132","messageId":"133","endLine":148,"endColumn":40},{"ruleId":"116","severity":1,"message":"117","line":188,"column":11,"nodeType":"118","endLine":188,"endColumn":33},{"ruleId":"101","severity":1,"message":"136","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},"@typescript-eslint/no-unused-vars","'FormDialog' is defined but never used.","Identifier","unusedVar","no-native-reassign",["137"],"no-negated-in-lhs",["138"],"'fade' is defined but never used.","'MenuIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'Divider' is defined but never used.","'TopMenu' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TopNavbar' is defined but never used.","'ChevronLeftIcon' is defined but never used.","'ScanIcon' is defined but never used.","'NavBarTheme' is defined but never used.","'profileAnchorEl' is assigned a value but never used.","'handleProfileClick' is assigned a value but never used.","'handleProfileClose' is assigned a value but never used.","'FrameProps' is defined but never used.","'Typography' is defined but never used.","'SvgIcon' is defined but never used.","'Link' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","Assignments to the 'previous' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]